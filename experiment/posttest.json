{
    "version": 2.0,
    "questions": [
        {
            "question": "1. What is the advantage of using linked list implementation of stack over array implementation?",
            "answers": {
                "a": "Pushing into the stack is faster in linked list implementation.",
                "b": "Popping from the stack is faster in linked list implementation.",
                "c": "Linked list has a variable size, unlike an array.",
                "d": "None of the above"
            },
            "correctAnswer": "c",
            "explanations": {},
            "difficulty": "beginner"
        },
        {
            "question": "2. Insertion and Deletion operations in Queue and Stack are known as ?",
            "answers": {
                "a": "Enqueue and Dequeue, Push and Pop",
                "b": "Push and Pop, Enqueue and Dequeue",
                "c": "Pop and Push, Dequeue and Enqueue",
                "d": "Dequeue and Enqueue, Pop and Push"
            },
            "correctAnswer": "a",
            "explanations": {},
            "difficulty": "beginner"
        },
        {
            "question": "3. What would be the time complexity to pop an element from the stack and dequeue an element from the queue ?",
            "answers": {
                "a": "O(n) and O(1)",
                "b": "O(1) and O(n)",
                "c": "O(1) and O(1)",
                "d": "O(n) and O(n)"
            },
            "correctAnswer": "c",
            "explanations": {},
            "difficulty": "beginner"
        },
        {
            "question": "4. Which of the following is the best to implement a priority queue?",
            "answers": {
                "a": "Heap",
                "b": "Array",
                "c": "Linnked List",
                "d": "Tree"
            },
            "correctAnswer": "a",
            "explanations": {
                "a": "When it comes to priority queue, we have an extra burden of making sure that the array is sorted which in worst case would be an O(n^2) operation for every enqueue, if we sort at insert. A heap, specifically a binary heap, provides a constant time search for the element with highest priority and insert and delete of highest priority can be done in O(Log n), which makes it an ideal Data structure for Priority Queue."
            },
            "difficulty": "advanced"
        }
    ]
}
